# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  cache-deps-win:
    runs-on: ubuntu-latest
    steps:
      - name: Get dependencies
        shell: bash
        run: |
          git clone https://github.com/ifvlaboratory/xmrig-deps
          COMMIT="$(git -C xmrig-deps rev-parse HEAD)"
      
      - name: Cache Windows dependenies
        uses: actions/cache@v4
        with:
          path: xmrig-deps
          key: xmrig-deps-${COMMIT}

  build-linux:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x64, x86]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Linux)
      run: sudo apt install build-essential cmake automake libtool autoconf

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure dependencies
      run: cd scripts && ./build_deps.sh

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DXMRIG_DEPS=scripts/deps
        -S ${{ github.workspace }}

    - name: Build
      run: | 
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
  
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xmrig_${{ matrix.c_compiler }}-${{ matrix.arch }}-${{ matrix.os }}
        path: ./build
        if-no-files-found: warn
        retention-days: 90
        compression-level: 0
        overwrite: false

  build-windows: 
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        arch: [x64, x86, arm64]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Windows)
      shell: pwsh
      run: |
        choco install git
        git clone https://github.com/ifvlaboratory/xmrig-deps

    - name: Cache Windows dependenies
      uses: actions/cache@v4
      with:
       path: xmrig-deps
       key: xmrig-deps-${COMMIT}
          
    - name: Configure CMake
      run: >
        cmake -B "${{ github.workspace }}/build"
        -G "Unix Makefiles"
        -DXMRIG_DEPS="$PWD\xmrig-deps\gcc\x64"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: | 
        cmake --build "${{ github.workspace }}/build" --config ${{ matrix.build_type }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xmrig_${{ matrix.c_compiler }}-${{ matrix.arch }}-${{ matrix.os }}
        path: ./build
        if-no-files-found: warn
        retention-days: 90
        compression-level: 0
        overwrite: false
